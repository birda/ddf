
<!--
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or any later version. 
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<artifactId>catalog-solr-embedded-pom</artifactId>
		<groupId>ddf.catalog.solr.embedded</groupId>
		<version>2.2.3-SNAPSHOT</version>
	</parent>

	<artifactId>catalog-solr-embedded-provider</artifactId>
	<packaging>bundle</packaging>
	<name>DDF :: Catalog :: Solr :: Embedded :: Provider</name>
	<description>A Catalog Provider library for an Apache Solr Server and for using an embedded Solr Server</description>

	<organization>
		<name>Codice</name>
		<url>http://www.codice.org/</url>
	</organization>

	<dependencies>

		<!--  Our branched spatial library for solr 4.1 -->
		<dependency>
			<groupId>ddf.thirdparty</groupId>
			<artifactId>lse</artifactId>
			<version>0.3_2</version>
		</dependency>

		<dependency>
			<groupId>org.apache.solr</groupId>
			<artifactId>solr-solrj</artifactId>
			<version>${solr.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.solr</groupId>
			<artifactId>solr-core</artifactId>
			<version>${solr.version}</version>
		</dependency>

		<dependency>
			<groupId>org.parboiled</groupId>
			<artifactId>parboiled-java</artifactId>
			<version>1.1.3</version>
		</dependency>

		<dependency>
			<groupId>com.vividsolutions</groupId>
			<artifactId>jts</artifactId>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
		</dependency>

		<dependency>
			<groupId>org.codehaus.woodstox</groupId>
			<artifactId>wstx-asl</artifactId>
			<version>3.2.7</version>
		</dependency>

		<dependency>
			<groupId>ddf.catalog.core</groupId>
			<artifactId>catalog-core-commons</artifactId>
			<!-- Excluding JScience dependency due to NoClassDefFoundError in GeotoolsAttributeBuilder during JUnit
				 testing if included. -->
			<exclusions>
				<exclusion>
					<artifactId>jscience</artifactId>
					<groupId>org.jscience</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>ddf.catalog.core</groupId>
			<artifactId>catalog-core-api</artifactId>
		</dependency>

		<dependency>
			<groupId>ddf.measure</groupId>
			<artifactId>measure-api</artifactId>
		</dependency>

		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
		</dependency>

		<!-- Originally I was using xerces-2.4 but since Solr had compiled with 
			a different version I was getting an AbstractMethodError, below is the version 
			that allows us to get pass this error. It is required to start up the Embedded 
			Solr instance. -->
		<dependency>
			<groupId>xerces</groupId>
			<artifactId>xercesImpl</artifactId>
		</dependency>

		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
		</dependency>

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
		</dependency>

		<dependency>
                        <groupId>commons-collections</groupId>
                        <artifactId>commons-collections</artifactId>
                </dependency>

		<dependency>
			<groupId>ddf.catalog.core</groupId>
			<artifactId>filter-proxy</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-artifacts</id>
						<phase>package</phase>
						<inherited>false</inherited>
						<goals>
							<goal>attach-artifact</goal>
						</goals>
						<configuration>
							<artifacts>
								<artifact>
									<file>target/classes/solr/conf/protwords.txt</file>
									<type>txt</type>
									<classifier>protwords</classifier>
								</artifact>
								<artifact>
									<file>target/classes/solr/conf/schema.xml</file>
									<type>xml</type>
									<classifier>schema</classifier>
								</artifact>
								<artifact>
									<file>target/classes/solr/conf/solrconfig.xml</file>
									<type>xml</type>
									<classifier>solrconfig</classifier>
								</artifact>
								<artifact>
									<file>target/classes/solr/conf/stopwords_en.txt</file>
									<type>txt</type>
									<classifier>stopwords_en</classifier>
								</artifact>
								<artifact>
									<file>target/classes/solr/conf/stopwords.txt</file>
									<type>txt</type>
									<classifier>stopwords</classifier>
								</artifact>
								<artifact>
									<file>target/classes/solr/conf/synonyms.txt</file>
									<type>txt</type>
									<classifier>synonyms</classifier>
								</artifact>
							</artifacts>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Export test JAR for reuse by other projects -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>test-jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<extensions>true</extensions>
				<configuration>
					<instructions>
						<Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>
						<Embed-Dependency>
							commons-cli,
							commons-fileupload,
							commons-codec,
							wstx-asl,
							solr-solrj,
							solr-core,
							commons-io,
							commons-lang,
							joda-time,
							lucene-core,
							lucene-analyzers-common,
							lucene-analyzers-morfologik,
							lucene-analyzers-phonetic,
							lucene-highlighter,
							lucene-memory,
							lucene-misc,
							lucene-queryparser,
							lucene-suggest,
							lucene-grouping,
							lucene-queries,
							guava,
							lucene-spatial,
							lse,
							httpclient,
							httpcore,
							httpmime,
							zookeeper
						</Embed-Dependency>
						<Embed-Transitive>true</Embed-Transitive>
						<!-- We want the maven-populated describable.properties, so we overwrite 
							the src/main/resources one with the one in target -->
						<Include-Resource>src/main/resources/,target/classes/describable.properties</Include-Resource>
						<!-- Package uses conflict if we do not embed this -->
						<Private-Package>
							ddf.catalog.source.solr;version="${project.version}",
							ddf.catalog.source.solr.textpath;version="${project.version}",
							org.parboiled.*,
							org.objectweb.asm,
							org.objectweb.asm.signature,
							org.objectweb.asm.tree,
							org.objectweb.asm.tree.analysis,
							org.objectweb.asm.util
						</Private-Package>
						<!-- Since we do object serialization as part of our extensible metacards, 
							we must dynamically import the classes we do not know about beforehand-->
						<DynamicImport-Package>*</DynamicImport-Package>
						<Export-Package />
						<Import-Package>
							com.spatial4j.core.context,
							com.spatial4j.core.context.jts,
							com.spatial4j.core.distance,
							com.spatial4j.core.exception,
							com.spatial4j.core.io,
							com.spatial4j.core.shape,
							com.sun.msv.grammar,
							com.sun.msv.grammar.trex,
							com.sun.msv.reader,
							com.sun.msv.reader.trex.ng,
							com.sun.msv.reader.util,
							com.sun.msv.util,
							com.sun.msv.verifier,
							com.sun.msv.verifier.regexp,
							com.vividsolutions.jts.algorithm,
							com.vividsolutions.jts.geom,
							com.vividsolutions.jts.io,
							com.vividsolutions.jts.operation.union,
							com.vividsolutions.jts.operation.valid,
							com.vividsolutions.jts.simplify,
							com.vividsolutions.jts.util,
							<!-- Remember, this is the same as saying, 2.0 or higher, not solely 2.0 -->
							ddf.catalog.data;version="2.0",
							ddf.catalog.filter;version="2.0",
							ddf.catalog.operation;version="2.0",
							ddf.catalog.source;version="2.0",
							ddf.catalog.util;version="2.0",
							ddf.measure;version="2.0",
							javax.annotation,
							javax.crypto,
							javax.crypto.spec,
							javax.jms,
							javax.management,
							javax.management.openmbean,
							javax.management.remote,
							javax.naming,
							javax.net.ssl,
							javax.security.auth,
							javax.security.auth.callback,
							javax.security.auth.kerberos,
							javax.security.auth.login,
							javax.security.auth.spi,
							javax.security.auth.x500,
							javax.security.sasl,
							javax.servlet,
							javax.servlet.http,
							javax.xml.namespace,
							javax.xml.parsers,
							javax.xml.stream,
							javax.xml.stream.events,
							javax.xml.stream.util,
							javax.xml.transform,
							javax.xml.transform.dom,
							javax.xml.transform.sax,
							javax.xml.transform.stream,
							javax.xml.xpath,
							org.apache.commons.logging;version="[1.1,2)",
							org.opengis.filter,
							org.opengis.filter.expression,
							org.opengis.filter.sort,
							org.osgi.framework;version="[1.5,2)",
							org.osgi.service.blueprint;version="[1.0.0,2.0.0)",
							org.slf4j;version="[1.6,2)",
							org.w3c.dom,
							org.xml.sax,
							org.xml.sax.ext,
							org.xml.sax.helpers,
							*;resolution:=optional
						</Import-Package>
					</instructions>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
